package A3;

import java.util.Hashtable;
import java.util.Stack;
import java.util.Vector;
import A2.Parser;

public class SemanticAnalyzer {
	 
	//private static Gui gui;
	//private static Vector<Token> tokens;
  private static final Hashtable<String, Vector<SymbolTableItem>> symbolTable = new Hashtable<String, Vector<SymbolTableItem>>();
  private static final Stack stack = new Stack();
  
  // create here a data structure for the cube of types
  private static final int INT=0;
  private static final int FLOAT=1;
  private static final int CHAR=2;
  private static final int STRING=3;
  private static final int BOOLEAN=4;
  private static final int VOID=5;
  private static final int ERROR=6;
  private static final int OK=10;
  
  int a[][][]={
		  		{{INT,FLOAT,ERROR,ERROR,ERROR,ERROR,ERROR},    //a[0][0][]
		  		 {FLOAT,FLOAT,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}}, //FOR {-,*,/}
		  		
		  		 {{INT,  FLOAT,ERROR,STRING,ERROR,ERROR,ERROR},//a[1][0][]
		  		  {FLOAT,FLOAT,ERROR,STRING,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,STRING,ERROR,ERROR,ERROR},
			      {STRING,STRING,STRING,STRING,STRING,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,STRING,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}},//FOR +
		  		 
		  		 {{INT,FLOAT,ERROR,ERROR,ERROR,ERROR,ERROR}}, //FOR UNARY -  a[2][0][]
		  		 
		  		 {{BOOLEAN,BOOLEAN,ERROR,ERROR,ERROR,ERROR,ERROR}, //a[3][0][]
		  		  {BOOLEAN,BOOLEAN,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}}, //FOR <,>
		  		  
		  		 {{BOOLEAN,BOOLEAN,ERROR,ERROR,ERROR,ERROR,ERROR}, //a[4][0][]
			  	  {BOOLEAN,BOOLEAN,ERROR,ERROR,ERROR,ERROR,ERROR}, 
			  	  {ERROR,ERROR,BOOLEAN,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,BOOLEAN,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,BOOLEAN,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
		  		  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}}, //FOR !=,==
		  		  
		  		 {{ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},   //a[5][0][]
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,BOOLEAN,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	  {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}},  //FOR &, !
		  		
			  	{{ERROR,ERROR,ERROR,ERROR,BOOLEAN,ERROR,ERROR}}, //FOR UNARY !  a[6][0][]
			  	
			  	{{OK,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR},  //a[7][0][]
			  	 {OK,OK,ERROR,ERROR,ERROR,ERROR,ERROR},
			  	 {ERROR,ERROR,OK,ERROR,ERROR,ERROR,ERROR},
			  	 {ERROR,ERROR,ERROR,OK,ERROR,ERROR,ERROR},
			  	 {ERROR,ERROR,ERROR,ERROR,OK,ERROR,ERROR},
			  	 {ERROR,ERROR,ERROR,ERROR,ERROR,OK,ERROR},
			  	 {ERROR,ERROR,ERROR,ERROR,ERROR,ERROR,ERROR}}  //FOR =
		  		 
		  		 
  };
  
  public static Stack getStack()
  {
	  return stack;
  }
  public static Hashtable<String, Vector<SymbolTableItem>> getSymbolTable() {
	 
    return symbolTable;
  }
  
  public static void checkVariable(String type, String id) {
	  
	
	  if(!symbolTable.containsKey(id))
	  {
		 // System.out.println("count2:" +count);
    // B. if !exist then insert: type, scope=global, value={0, false, "", '')
		  Vector v = new Vector();
		  v.add(new SymbolTableItem(type,"global", ""));
		  symbolTable.put(id, v);
	  }
	  else
		//  System.out.println("hello");
		error(Parser.getgui(),1,Parser.getlineno());
    // C. else error: â€œvariable id is already definedâ€?
	  
  }

  public static void pushStack(String type) {
  
	  stack.push(type);
	  System.out.println(stack);
    // push type in the stack
  }
  
  public static String popStack() {
    String result="";
    // pop a value from the stack
    return result;
  }
  
  
  private String calculateCube(String type, String operator) {
    String result="";
    // unary operator ( - and !)
    return result;
  }

  private String calculateCube(String type1, String type2, String operator) {
    String result="";
    // binary operator ( - and !)
    return result;
  }
  
  private static void error(Gui gui, int err, int n) {
    switch (err) {
      case 1: 
        gui.writeConsole("Line" + n + ": variable id is already defined"); 
        break;
      case 2: 
        gui.writeConsole("Line" + n + ": incompatible types: type mismatch"); 
        break;
      case 3: 
        gui.writeConsole("Line" + n + ": incompatible types: expected boolean"); 
        break;

    }
  }
  
}
